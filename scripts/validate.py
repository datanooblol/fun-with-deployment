#!/usr/bin/env python3\n\"\"\"\nValidation script for DS Pipeline deployment\nChecks if all components are properly deployed and configured\n\"\"\"\nimport boto3\nimport json\nimport sys\nfrom typing import Dict, List, Tuple\n\nclass PipelineValidator:\n    def __init__(self, environment: str = \"dev\"):\n        self.environment = environment\n        self.account, self.region = self._get_account_region()\n        self.errors = []\n        self.warnings = []\n        \n    def _get_account_region(self) -> Tuple[str, str]:\n        \"\"\"Get current AWS account and region\"\"\"\n        sts = boto3.client('sts')\n        account = sts.get_caller_identity()['Account']\n        region = boto3.Session().region_name or 'us-east-1'\n        return account, region\n    \n    def _add_error(self, message: str):\n        \"\"\"Add error message\"\"\"\n        self.errors.append(f\"‚ùå {message}\")\n        \n    def _add_warning(self, message: str):\n        \"\"\"Add warning message\"\"\"\n        self.warnings.append(f\"‚ö†Ô∏è  {message}\")\n        \n    def _add_success(self, message: str):\n        \"\"\"Print success message\"\"\"\n        print(f\"‚úÖ {message}\")\n    \n    def validate_s3_buckets(self) -> bool:\n        \"\"\"Validate S3 buckets exist and have correct permissions\"\"\"\n        print(\"\\nü™£ Validating S3 Buckets...\")\n        \n        s3 = boto3.client('s3')\n        expected_buckets = [\n            f\"ds-input-{self.environment}-{self.account}-{self.region}\",\n            f\"ds-output-{self.environment}-{self.account}-{self.region}\"\n        ]\n        \n        # Add artifact bucket for dev, or check cross-account access for prod\n        if self.environment == \"dev\":\n            expected_buckets.append(f\"ds-artifacts-{self.environment}-{self.account}-{self.region}\")\n        \n        success = True\n        for bucket_name in expected_buckets:\n            try:\n                s3.head_bucket(Bucket=bucket_name)\n                self._add_success(f\"Bucket exists: {bucket_name}\")\n            except Exception as e:\n                self._add_error(f\"Bucket missing or inaccessible: {bucket_name} - {e}\")\n                success = False\n        \n        # For prod, validate cross-account access to dev artifacts\n        if self.environment == \"prod\":\n            dev_artifact_bucket = f\"ds-artifacts-dev-123456789012-{self.region}\"\n            try:\n                s3.list_objects_v2(Bucket=dev_artifact_bucket, MaxKeys=1)\n                self._add_success(f\"Cross-account access to dev artifacts: {dev_artifact_bucket}\")\n            except Exception as e:\n                self._add_error(f\"Cannot access dev artifact bucket: {dev_artifact_bucket} - {e}\")\n                success = False\n        \n        return success\n    \n    def validate_ecr_repository(self) -> bool:\n        \"\"\"Validate ECR repository exists and has images\"\"\"\n        print(\"\\nüê≥ Validating ECR Repository...\")\n        \n        ecr = boto3.client('ecr')\n        repo_name = \"ds-preprocessing\"\n        \n        try:\n            # Check if repository exists\n            ecr.describe_repositories(repositoryNames=[repo_name])\n            self._add_success(f\"ECR repository exists: {repo_name}\")\n            \n            # Check if images exist\n            images = ecr.describe_images(repositoryName=repo_name)\n            if images['imageDetails']:\n                image_count = len(images['imageDetails'])\n                self._add_success(f\"Found {image_count} images in repository\")\n                \n                # Check for latest tag\n                latest_images = [img for img in images['imageDetails'] \n                               if 'imageTags' in img and 'latest' in img['imageTags']]\n                if latest_images:\n                    self._add_success(\"Latest image tag found\")\n                else:\n                    self._add_warning(\"No 'latest' tag found - may need to push image\")\n            else:\n                self._add_warning(\"No images found in repository - need to push image\")\n            \n            return True\n            \n        except ecr.exceptions.RepositoryNotFoundException:\n            self._add_error(f\"ECR repository not found: {repo_name}\")\n            return False\n        except Exception as e:\n            self._add_error(f\"Error checking ECR repository: {e}\")\n            return False\n    \n    def validate_ecs_cluster(self) -> bool:\n        \"\"\"Validate ECS cluster and task definition\"\"\"\n        print(\"\\n‚öôÔ∏è Validating ECS Cluster...\")\n        \n        ecs = boto3.client('ecs')\n        cluster_name = \"ds-processing-cluster\"\n        \n        try:\n            # Check cluster\n            clusters = ecs.describe_clusters(clusters=[cluster_name])\n            if clusters['clusters'] and clusters['clusters'][0]['status'] == 'ACTIVE':\n                self._add_success(f\"ECS cluster active: {cluster_name}\")\n            else:\n                self._add_error(f\"ECS cluster not active: {cluster_name}\")\n                return False\n            \n            # Check task definition\n            task_families = ecs.list_task_definitions(familyPrefix=\"ds-preprocessing\")\n            if task_families['taskDefinitionArns']:\n                latest_task_def = task_families['taskDefinitionArns'][-1]\n                self._add_success(f\"Task definition exists: {latest_task_def.split('/')[-1]}\")\n                \n                # Get task definition details\n                task_def = ecs.describe_task_definition(taskDefinition=latest_task_def)\n                containers = task_def['taskDefinition']['containerDefinitions']\n                \n                if containers:\n                    container = containers[0]\n                    self._add_success(f\"Container image: {container['image']}\")\n                    self._add_success(f\"Memory: {task_def['taskDefinition']['memory']} MB\")\n                    self._add_success(f\"CPU: {task_def['taskDefinition']['cpu']} units\")\n                else:\n                    self._add_error(\"No containers found in task definition\")\n                    return False\n            else:\n                self._add_error(\"No task definitions found\")\n                return False\n            \n            return True\n            \n        except Exception as e:\n            self._add_error(f\"Error validating ECS: {e}\")\n            return False\n    \n    def validate_step_functions(self) -> bool:\n        \"\"\"Validate Step Functions state machine\"\"\"\n        print(\"\\nüîÑ Validating Step Functions...\")\n        \n        sfn = boto3.client('stepfunctions')\n        \n        try:\n            state_machines = sfn.list_state_machines()\n            pipeline_sm = None\n            \n            for sm in state_machines['stateMachines']:\n                if sm['name'] == 'ds-preprocessing-pipeline':\n                    pipeline_sm = sm\n                    break\n            \n            if pipeline_sm:\n                self._add_success(f\"State machine exists: {pipeline_sm['name']}\")\n                self._add_success(f\"Status: {pipeline_sm['status']}\")\n                \n                # Check recent executions\n                executions = sfn.list_executions(\n                    stateMachineArn=pipeline_sm['stateMachineArn'],\n                    maxResults=5\n                )\n                \n                if executions['executions']:\n                    recent_execution = executions['executions'][0]\n                    self._add_success(f\"Recent execution: {recent_execution['status']}\")\n                else:\n                    self._add_warning(\"No executions found - pipeline not yet tested\")\n                \n                return True\n            else:\n                self._add_error(\"Step Functions state machine not found\")\n                return False\n                \n        except Exception as e:\n            self._add_error(f\"Error validating Step Functions: {e}\")\n            return False\n    \n    def validate_parameter_store(self) -> bool:\n        \"\"\"Validate Parameter Store parameters\"\"\"\n        print(\"\\nüìã Validating Parameter Store...\")\n        \n        ssm = boto3.client('ssm')\n        required_params = [\n            \"/ds/preprocessing/input-bucket\",\n            \"/ds/preprocessing/output-bucket\", \n            \"/ds/preprocessing/artifact-bucket\",\n            \"/ds/preprocessing/input-key\",\n            \"/ds/preprocessing/model-key\"\n        ]\n        \n        success = True\n        for param_name in required_params:\n            try:\n                param = ssm.get_parameter(Name=param_name)\n                value = param['Parameter']['Value']\n                self._add_success(f\"{param_name} = {value}\")\n            except ssm.exceptions.ParameterNotFound:\n                self._add_error(f\"Parameter not found: {param_name}\")\n                success = False\n            except Exception as e:\n                self._add_error(f\"Error getting parameter {param_name}: {e}\")\n                success = False\n        \n        return success\n    \n    def validate_eventbridge(self) -> bool:\n        \"\"\"Validate EventBridge scheduling (prod only)\"\"\"\n        if self.environment != \"prod\":\n            return True\n            \n        print(\"\\n‚è∞ Validating EventBridge Scheduling...\")\n        \n        events = boto3.client('events')\n        \n        try:\n            rules = events.list_rules(NamePrefix=\"ds-monthly-processing\")\n            \n            if rules['Rules']:\n                rule = rules['Rules'][0]\n                self._add_success(f\"EventBridge rule exists: {rule['Name']}\")\n                self._add_success(f\"Schedule: {rule['ScheduleExpression']}\")\n                self._add_success(f\"State: {rule['State']}\")\n                \n                # Check targets\n                targets = events.list_targets_by_rule(Rule=rule['Name'])\n                if targets['Targets']:\n                    self._add_success(f\"Found {len(targets['Targets'])} targets\")\n                else:\n                    self._add_error(\"No targets configured for EventBridge rule\")\n                    return False\n                \n                return True\n            else:\n                self._add_error(\"EventBridge rule not found\")\n                return False\n                \n        except Exception as e:\n            self._add_error(f\"Error validating EventBridge: {e}\")\n            return False\n    \n    def validate_iam_permissions(self) -> bool:\n        \"\"\"Validate IAM roles and permissions\"\"\"\n        print(\"\\nüîê Validating IAM Permissions...\")\n        \n        iam = boto3.client('iam')\n        \n        try:\n            # Find ECS task role\n            roles = iam.list_roles()\n            task_role = None\n            \n            for role in roles['Roles']:\n                if 'TaskRole' in role['RoleName'] and 'DSPipelineStack' in role['RoleName']:\n                    task_role = role\n                    break\n            \n            if task_role:\n                self._add_success(f\"ECS task role found: {task_role['RoleName']}\")\n                \n                # Check attached policies\n                attached_policies = iam.list_attached_role_policies(RoleName=task_role['RoleName'])\n                policy_count = len(attached_policies['AttachedPolicies'])\n                self._add_success(f\"Attached policies: {policy_count}\")\n                \n                # Check inline policies\n                inline_policies = iam.list_role_policies(RoleName=task_role['RoleName'])\n                if inline_policies['PolicyNames']:\n                    self._add_success(f\"Inline policies: {len(inline_policies['PolicyNames'])}\")\n                \n                return True\n            else:\n                self._add_error(\"ECS task role not found\")\n                return False\n                \n        except Exception as e:\n            self._add_error(f\"Error validating IAM: {e}\")\n            return False\n    \n    def run_validation(self) -> bool:\n        \"\"\"Run all validations\"\"\"\n        print(f\"üîç Validating DS Pipeline deployment for {self.environment} environment...\")\n        print(f\"Account: {self.account}, Region: {self.region}\")\n        \n        validations = [\n            self.validate_s3_buckets,\n            self.validate_ecr_repository,\n            self.validate_ecs_cluster,\n            self.validate_step_functions,\n            self.validate_parameter_store,\n            self.validate_eventbridge,\n            self.validate_iam_permissions\n        ]\n        \n        all_passed = True\n        for validation in validations:\n            try:\n                if not validation():\n                    all_passed = False\n            except Exception as e:\n                self._add_error(f\"Validation failed with exception: {e}\")\n                all_passed = False\n        \n        # Print summary\n        print(\"\\n\" + \"=\"*50)\n        print(\"VALIDATION SUMMARY\")\n        print(\"=\"*50)\n        \n        if self.errors:\n            print(\"\\nERRORS:\")\n            for error in self.errors:\n                print(error)\n        \n        if self.warnings:\n            print(\"\\nWARNINGS:\")\n            for warning in self.warnings:\n                print(warning)\n        \n        if all_passed and not self.errors:\n            print(\"\\nüéâ All validations passed! Pipeline is ready to use.\")\n        else:\n            print(\"\\n‚ùå Some validations failed. Please fix the issues above.\")\n        \n        return all_passed and not self.errors\n\ndef main():\n    import argparse\n    \n    parser = argparse.ArgumentParser(description='Validate DS Pipeline deployment')\n    parser.add_argument('--environment', '-e', choices=['dev', 'prod'], default='dev',\n                       help='Environment to validate')\n    \n    args = parser.parse_args()\n    \n    validator = PipelineValidator(args.environment)\n    success = validator.run_validation()\n    \n    sys.exit(0 if success else 1)\n\nif __name__ == \"__main__\":\n    main()